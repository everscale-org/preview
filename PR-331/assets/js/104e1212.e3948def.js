"use strict";(self.webpackChunkeverscale_docs_website=self.webpackChunkeverscale_docs_website||[]).push([[7155],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),c=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),m=r,h=p["".concat(i,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(h,l(l({ref:t},u),{},{components:n})):a.createElement(h,l({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:r,l[1]=s;for(var c=2;c<o;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>l});var a=n(7294),r=n(6010);const o={tabItem:"tabItem_Ymn6"};function l(e){let{children:t,hidden:n,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o.tabItem,l),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>T});var a=n(7462),r=n(7294),o=n(6010),l=n(2466),s=n(6550),i=n(1980),c=n(7392),u=n(12);function p(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function d(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??p(n);return function(e){const t=(0,c.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),o=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,i._X)(o),(0,r.useCallback)((e=>{if(!o)return;const t=new URLSearchParams(a.location.search);t.set(o,e),a.replace({...a.location,search:t.toString()})}),[o,a])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,o=d(e),[l,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!m({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:o}))),[i,c]=h({queryString:n,groupId:a}),[p,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,o]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&o.set(e)}),[n,o])]}({groupId:a}),f=(()=>{const e=i??p;return m({value:e,tabValues:o})?e:null})();(0,r.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:l,selectValue:(0,r.useCallback)((e=>{if(!m({value:e,tabValues:o}))throw new Error(`Can't select invalid tab value=${e}`);s(e),c(e),g(e)}),[c,g,o]),tabValues:o}}var f=n(2389);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function v(e){let{className:t,block:n,selectedValue:s,selectValue:i,tabValues:c}=e;const u=[],{blockElementScrollPositionUntilNextRender:p}=(0,l.o5)(),d=e=>{const t=e.currentTarget,n=u.indexOf(t),a=c[n].value;a!==s&&(p(t),i(a))},m=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":n},t)},c.map((e=>{let{value:t,label:n,attributes:l}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:m,onClick:d},l,{className:(0,o.Z)("tabs__item",y.tabItem,l?.className,{"tabs__item--active":s===t})}),n??t)})))}function b(e){let{lazy:t,children:n,selectedValue:a}=e;const o=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=o.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},o.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function k(e){const t=g(e);return r.createElement("div",{className:(0,o.Z)("tabs-container",y.tabList)},r.createElement(v,(0,a.Z)({},e,t)),r.createElement(b,(0,a.Z)({},e,t)))}function T(e){const t=(0,f.Z)();return r.createElement(k,(0,a.Z)({key:String(t)},e))}},2804:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>i,default:()=>h,frontMatter:()=>s,metadata:()=>c,toc:()=>p});var a=n(7462),r=(n(7294),n(3905)),o=n(4866),l=n(5162);const s={sidebar_position:12,description:"Integrating Evercloud GraphQL API with Typescript"},i="GraphQL code generation",c={unversionedId:"develop/payment",id:"develop/payment",title:"GraphQL code generation",description:"Integrating Evercloud GraphQL API with Typescript",source:"@site/../../src/develop/payment.md",sourceDirName:"develop",slug:"/develop/payment",permalink:"/preview/PR-331/develop/payment",draft:!1,editUrl:"https://github.com/everscale-org/docs/edit/main/.build/website/../../src/develop/payment.md",tags:[],version:"current",lastUpdatedAt:1683897644,formattedLastUpdatedAt:"May 12, 2023",sidebarPosition:12,frontMatter:{sidebar_position:12,description:"Integrating Evercloud GraphQL API with Typescript"},sidebar:"tutorialSidebar",previous:{title:"SMV Contracts",permalink:"/preview/PR-331/develop/smv-contracts"},next:{title:"Hackathons & Grants",permalink:"/preview/PR-331/develop/hackathons-grants"}},u={},p=[{value:"Evercloud GraphQL",id:"evercloud-graphql",level:2},{value:"Setting up code generation",id:"setting-up-code-generation",level:2},{value:"API initialization",id:"api-initialization",level:2},{value:"Code examples",id:"code-examples",level:2},{value:"Get account balance",id:"get-account-balance",level:3},{value:"Get incoming messages",id:"get-incoming-messages",level:3},{value:"Example project",id:"example-project",level:2}],d={toc:p},m="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"graphql-code-generation"},"GraphQL code generation"),(0,r.kt)("p",null,"This is a guide to help you quickly integrate Everscale into your Typescript project using Evercloud GraphQL API for making queries to the blockchain, and ",(0,r.kt)("a",{parentName:"p",href:"https://the-guild.dev/graphql/codegen"},"GraphQL Code Generator")," for automatically generating type definitions from the API schema."),(0,r.kt)("h2",{id:"evercloud-graphql"},"Evercloud GraphQL"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://www.evercloud.dev/"},"Evercloud")," makes it easy to set up and manage a GraphQL endpoint for your application, providing you with secure access to the Everscale blockchain."),(0,r.kt)("p",null,"Follow ",(0,r.kt)("a",{parentName:"p",href:"https://docs.evercloud.dev/products/evercloud/get-started"},"this guide")," to set up a project on Evercloud. Make sure to note down the project ID in the security tab, as well as the project secret, as you will need to configure these in the code."),(0,r.kt)("p",null,"Once you have the necessary credentials, you're ready to start making GraphQL queries to the Everscale network in your TypeScript project. To cater to various development preferences, we'll provide two versions for each example: one using the Everscale SDK (follow ",(0,r.kt)("a",{parentName:"p",href:"https://docs.everos.dev/ever-sdk/guides/installation/add_sdk_to_your_app"},"this guide")," for setup instructions) and another using ",(0,r.kt)("a",{parentName:"p",href:"https://axios-http.com/"},"Axios"),", a popular HTTP client for JavaScript."),(0,r.kt)("h2",{id:"setting-up-code-generation"},"Setting up code generation"),(0,r.kt)("p",null,"First, add both the ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"@graphql-codegen/cli")," packages to your project's dependencies:"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"npm",label:"npm",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"npm install graphql\nnpm install -D typescript\nnpm install -D @graphql-codegen/cli\nnpm install -D @graphql-codegen/typescript\n"))),(0,r.kt)(l.Z,{value:"yarn",label:"yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"yarn add graphql\nyarn add -D typescript\nyarn add -D @graphql-codegen/cli\nyarn add -D @graphql-codegen/typescript\n")))),(0,r.kt)("p",null,"Next, create a file named ",(0,r.kt)("inlineCode",{parentName:"p"},"codegen.ts")," in your project's root folder containing the following (adjust as needed):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import type {CodegenConfig} from '@graphql-codegen/cli'\n\n// configure your credentials here\nconst PROJECT_ID = ''\nconst PROJECT_SECRET = ''\n\nconst schemaUrl = `https://mainnet.evercloud.dev/${PROJECT_ID}/graphql`\n\nconst config: CodegenConfig = {\n  overwrite: true,\n  schema: [\n    {\n      [schemaUrl]: {\n        headers: {\n          Authorization: `Basic ${PROJECT_SECRET}`,\n        },\n      },\n    },\n  ],\n  documents: ['src/**/*.ts'],\n  ignoreNoDocuments: true, // for better experience with the watcher\n  generates: {\n    'src/generated/graphql.ts': {\n      plugins: ['typescript'],\n    },\n  },\n  watch: true,\n}\n\nexport default config\n")),(0,r.kt)("p",null,"Finally, follow ",(0,r.kt)("a",{parentName:"p",href:"https://the-guild.dev/graphql/codegen/docs/getting-started/development-workflow"},"these instructions")," to add GraphQL code generation to your development workflow."),(0,r.kt)("h2",{id:"api-initialization"},"API initialization"),(0,r.kt)("p",null,"To start making queries to the GraphQL API, you'll need to configure your client. Following is an example on how you can do that using either the Everscale SDK or Axios."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"sdk",label:"Everscale SDK",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {TonClient} from '@eversdk/core'\nimport {libNode} from '@eversdk/lib-node'\n\n// configure your credentials here\nconst PROJECT_ID = ''\nconst PROJECT_SECRET = ''\n\nTonClient.useBinaryLibrary(libNode)\n\nconst client = new TonClient({\n  network: {\n    endpoints: [`https://mainnet.evercloud.dev/${PROJECT_ID}/graphql`],\n    access_key: PROJECT_SECRET,\n  },\n})\n"))),(0,r.kt)(l.Z,{value:"axios",label:"Axios",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import axios from 'axios'\n\n// configure your credentials here\nconst PROJECT_ID = ''\nconst PROJECT_SECRET = ''\n\naxios.defaults.baseURL = `https://mainnet.evercloud.dev/${PROJECT_ID}/graphql`\naxios.defaults.headers.post['Content-Type'] = 'application/json'\nif (PROJECT_SECRET) {\n  axios.defaults.auth = {\n    username: '',\n    password: PROJECT_SECRET,\n  }\n}\n")))),(0,r.kt)("h2",{id:"code-examples"},"Code examples"),(0,r.kt)("p",null,"Following examples demonstrate how you can use the types generated from the GraphQL schema in your project."),(0,r.kt)("h3",{id:"get-account-balance"},"Get account balance"),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"sdk",label:"Everscale SDK",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {BlockchainQuery} from './generated/graphql'\n\n// Specify your account's address\nconst ACCOUNT_ADDRESS = ''\n\ntry {\n  const query = `\n    query {\n      blockchain {\n        account(\n          address: \"${ACCOUNT_ADDRESS}\"\n        ) {\n          info {\n            balance(format: DEC)\n          }\n        }\n      }\n    }`\n  const {result} = await client.net.query({query})\n  const blockchain: BlockchainQuery = result.data.blockchain\n  console.log(`The account balance is ${blockchain.account.info.balance / 10**9}`)\n  client.close()\n} catch (error) {\n  console.error(error)\n}\n"))),(0,r.kt)(l.Z,{value:"axios",label:"Axios",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {BlockchainQuery} from './generated/graphql'\n\n// Specify your account's address\nconst ACCOUNT_ADDRESS = ''\n\ntry {\n  const query = `\n    query {\n      blockchain {\n        account(\n          address: \"${ACCOUNT_ADDRESS}\"\n        ) {\n          info {\n            balance(format: DEC)\n          }\n        }\n      }\n    }`\n  const {data} = await axios.post('', {query})\n  const blockchain: BlockchainQuery = data.data.blockchain\n  console.log(`The account balance is ${blockchain.account.info.balance / 10**9}`)\n} catch (error) {\n  console.error(error)\n}\n")))),(0,r.kt)("h3",{id:"get-incoming-messages"},"Get incoming messages"),(0,r.kt)("p",null,"This example shows how to query incoming messages for a specified destination account using both the Everscale SDK and Axios. This can be particularly useful for processing incoming token transfers or other transaction-related information."),(0,r.kt)("p",null,"Keep in mind that you will need to implement your own pagination to retrieve all messages, as the maximum limit of messages returned per query is 50. Consult ",(0,r.kt)("a",{parentName:"p",href:"https://docs.evercloud.dev/reference/graphql-api/query_language#sorting-and-limiting"},"this document")," for more information on how to achieve this."),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"sdk",label:"Everscale SDK",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {BlockchainMessage} from './generated/graphql'\n\n// Specify your account's address\nconst ACCOUNT_ADDRESS = ''\n\ntry {\n  const query = `\n    query {\n      messages(\n        filter: {\n          dst: {\n            eq: \"${ACCOUNT_ADDRESS}\"\n          }\n        }\n      ) {\n        id\n        src\n        value(format: DEC)\n      }\n    }`\n  const {result} = await client.net.query({query})\n  const messages: BlockchainMessage[] = result.data.messages\n  console.log(messages)\n  client.close()\n} catch (error) {\n  console.error(error)\n}\n"))),(0,r.kt)(l.Z,{value:"axios",label:"Axios",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {BlockchainMessage} from './generated/graphql'\n\n// Specify your account's address\nconst ACCOUNT_ADDRESS = ''\n\ntry {\n  const query = `\n    query {\n      messages(\n        filter: {\n          dst: {\n            eq: \"${ACCOUNT_ADDRESS}\"\n          }\n        }\n      ) {\n        id\n        src\n        value(format: DEC)\n      }\n    }`\n  const {data} = await axios.post('', {query})\n  const messages: BlockchainMessage[] = data.data.messages\n  console.log(messages)\n  client.close()\n} catch (error) {\n  console.error(error)\n}\n")))),(0,r.kt)("h2",{id:"example-project"},"Example project"),(0,r.kt)("p",null,"See ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/everscale-contest/everscale-graphql/tree/main/examples"},"the examples directory in this repository")," for a demo project containing these examples."))}h.isMDXComponent=!0}}]);